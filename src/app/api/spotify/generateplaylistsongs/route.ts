// endpoint to generate playlist from top songs of user
// query: time_range,

import { NextRequest, NextResponse } from "next/server";
import { checkAuth, checkSpotifyRespose } from "@lib/spotify/apiChecks";

interface parsedResponseMe {
	display_name: string;
	email: string;
	external_urls: {
		spotify: string;
	};
	followers: {
		total: number;
	};
	id: string;
	images: [
		{
			url: string;
			width: number;
			height: number;
		},
	];
}

interface parsedResponseSongs {
	total: number;
	limit: number;
	items: [
		{
			album: {
				album_type: string;
				total_tracks: number;
				available_markets: string[];
				external_urls: {
					spotify: string;
				};
				href: string;
				id: string;
				images: [
					{
						height: number;
						url: string;
						width: number;
					},
				];
				name: string;
				release_date: string;
			};
			artists: [
				{
					external_urls: {
						spotify: string;
					};
					followers: {
						total: number;
					};
					genres: string[];
					id: string;
					images: [
						{
							height: number;
							url: string;
							width: number;
						},
					];
					name: string;
					popularity: number;
				},
			];
			available_markets: string[];
			duration_ms: number;
			explicit: boolean;
			href: string;
			id: string;
			name: string;
			popularity: number;
			preview_url: string;
			uri: string;
		},
	];
}

interface parsedResponsePlaylist {
	collaborative: boolean;
	description: string;
	external_urls: {
		spotify: string;
	};
	followers: {
		href: string;
		total: number;
	};
	href: string;
	id: string;
}

export async function POST(request: NextRequest) {
	//check if query is valid
	console.log("(/)started generating playlist");
	const time_range = request.nextUrl.searchParams.get("time_range");
	if (
		time_range == null &&
		time_range != "long_term" &&
		time_range != "medium_term" &&
		time_range != "short_term"
	) {
		return NextResponse.json({ error: "Invalid query" }, { status: 400 });
	}

	//check authorization
	const authorization = request.headers.get("authorization") as string;
	let authOK = checkAuth(authorization);
	if (authOK != null) {
		return authOK;
	}
	console.log("(/)auth ok");
	//fetch id from spotify
	let spotifyRes = await fetch(`https://api.spotify.com/v1/me`, {
		headers: {
			Authorization: authorization,
		},
		method: "GET",
	});
	console.log("(/)fetched person data from spotify");
	//check if data was fetched
	let spotifyResOK = checkSpotifyRespose(spotifyRes);
	if (spotifyResOK != null) {
		return spotifyResOK;
	}
	//get id from data
	let data: parsedResponseMe = await spotifyRes.json();
	let id = data.id;
	console.log("(/)got id");
	//fetch top songs from spotify
	spotifyRes = await fetch(
		`https://api.spotify.com/v1/me/top/tracks?time_range=${time_range}&limit=50`,
		{
			headers: {
				Authorization: authorization,
			},
			method: "GET",
		},
	);
	//check if data was fetched
	console.log("(/)fetched top songs from spotify");
	spotifyResOK = checkSpotifyRespose(spotifyRes);
	if (spotifyResOK != null) {
		return spotifyResOK;
	}
	console.log("(/)top songs ok");
	//get top songs uri from data

	let topSongs: parsedResponseSongs = await spotifyRes.json();
	let topSongsUri = topSongs.items.map((song) => {
		return song.uri;
	});
	let totalSongs = topSongs.total;
	console.log("(/)got top songs uri");
	//create playlist
	spotifyRes = await fetch(
		`https://api.spotify.com/v1/users/${id}/playlists`,
		{
			method: "POST",
			headers: {
				Authorization: authorization,
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				//name if playlist of date eather 4 weaks ago 6 moths ago or names it all time
				name:
					time_range == "long_term"
						? `Top ${totalSongs} Songs of All Time`
						: time_range == "medium_term"
						? `Top ${totalSongs} Songs of the Last 6 Months`
						: `Top ${totalSongs} Songs of the Last 4 Weeks`,
				description: `This is a playlist generated by Music Analyser on ${new Date(
					Date.now(),
				).getDate()}-${new Date(Date.now()).getMonth()}-${new Date(
					Date.now(),
				).getFullYear()} . Check out your Spotify Stats at https://music-analyzer.tech`,
				public: true,
			}),
		},
	);
	console.log("(/)created playlist");
	//check if data worked
	if (spotifyRes.status != 201) {
		return NextResponse.json(
			{ error: "Error creating playlist" },
			{ status: 500 },
		);
	}
	console.log("(/)playlist ok");
	//get playlist id from data
	let playlist: parsedResponsePlaylist = await spotifyRes.json();
	let playlistId = playlist.id;
	//add songs to playlist
	spotifyRes = await fetch(
		`https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
		{
			method: "POST",
			headers: {
				Authorization: authorization,
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				uris: topSongsUri,
				position: 0,
			}),
		},
	);
	console.log("(/)added songs to playlist");

	//add cover image to playlist
	//check if data worked
	if (spotifyRes.status != 201) {
		//delete playlist
		spotifyRes = await fetch(
			`https://api.spotify.com/v1/playlists/${playlistId}/followers`,
			{
				method: "DELETE",
				headers: {
					Authorization: authorization,
				},
			},
		);
		console.log("(/)deleted playlist");
		return NextResponse.json(
			{ error: "Error adding songs to playlist" },
			{ status: 500 },
		);
	}
	console.log("(/)songs added ok");
	//add cover image from to playlist
	// get image depending on time_range
	const imageURL = `/${time_range}.jpg`;
	//convert to base64
	const image = await fetch(process.env.APP_URL + imageURL);
	const imageBuffer = await image.arrayBuffer();
	const base64 = Buffer.from(imageBuffer).toString("base64");

	spotifyRes = await fetch(
		`https://api.spotify.com/v1/playlists/${playlistId}/images`,
		{
			method: "PUT",
			headers: {
				Authorization: authorization,
				"Content-Type": "image/jpeg",
			},
			body: base64,
		},
	);
	//check if data worked
	if (spotifyRes.status != 202) {
		return NextResponse.json(
			{ error: "Error adding cover image to playlist" },
			{ status: 201 },
		);
	}

	console.log("(/)added cover image to playlist");
	console.log("---finished generating playlist---");
	//return href to playlist
	return NextResponse.json(
		{ href: playlist.external_urls.spotify },
		{ status: 201 },
	);
}
