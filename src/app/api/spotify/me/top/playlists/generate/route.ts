import { withSpotifyAuth } from "@lib/wrapper/withSpotifyAuth";
import { z } from "zod";
import { NextResponse } from "next/server";

export type SpotifyCreateCurrentUsersTopTracksPlaylistResponse = {};

const requestParamsSchema = z.object({
	timeRange: z.enum(["short_term", "medium_term", "long_term"]),
	limit: z.number().positive(),
});
export const POST = withSpotifyAuth(async (_req, params, spotifyClient) => {
	const userRes = await spotifyClient.users.getCurrentUsersProfile();

	const topTracksRes = await spotifyClient.users.getUsersTopTracks(
		params.timeRange,
		params.limit,
	);
	const topTracksUris = topTracksRes.data.items
		.map((track) => {
			return track.uri!;
		})
		.reduce((prev, current) => `${prev},${current}`, "");

	const topTracksTotal = topTracksRes.data.total;

	const createPlaylistRes = await spotifyClient.playlists.createPlaylist(
		userRes.data.id!,
		{
			name: getPlaylistName(params.timeRange, topTracksTotal),
			description: getPlaylistDescription(),
			public: true,
		},
	);

	await spotifyClient.playlists.addTracksToPlaylist(
		createPlaylistRes.data.id!,
		0,
		topTracksUris,
	);

	return NextResponse.json<SpotifyCreateCurrentUsersTopTracksPlaylistResponse>(
		{},
	);
}, requestParamsSchema);

function getPlaylistDescription(): string {
	const date = new Date(Date.now());

	return `This is a playlist generated by Music Analyser on ${date.getDate()}-${date.getMonth()}-${date.getFullYear()}`;
}

function getPlaylistName(
	timeRange: "short_term" | "medium_term" | "long_term",
	totalSongs: number,
): string {
	switch (timeRange) {
		case "long_term":
			return `Top ${totalSongs} Songs of All Time`;
		case "medium_term":
			return `Top ${totalSongs} Songs of the Last 6 Months`;
		case "short_term":
			return `Top ${totalSongs} Songs of the Last 4 Weeks`;
	}
}
